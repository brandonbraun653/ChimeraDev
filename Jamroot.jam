import os ;
import feature ;
import modules ;

import lib/CommonTools/boost-build/features/chimera ;
import lib/CommonTools/boost-build/features/freertos ;
import lib/CommonTools/boost-build/features/coverage ;

rule explicit_alias ( name : sources * : requirements * : default-build * : usage-requirements * )
    {
    alias $(name) : $(sources) : $(requirements) : $(default-build) : $(usage-requirements) ;
    explicit $(name) ;
    }

using gcc ;

path-constant TOP : . ;
path-constant ARTIFACTS_DIR : $(TOP)/artifacts ;
path-constant COVERAGE_DIR : $(ARTIFACTS_DIR)/coverage ;
path-constant COVERAGE_BUILD_DIR : $(COVERAGE_DIR)/build ;

use-project /PRJ : . ;
use-project /CHIMERA : Chimera ;
use-project /CHIMERA/TEST/STANDALONE : Chimera/test/standalone ;
use-project /COVERAGE : lib/CommonTools/boost-build/targets/coverage ;
use-project /FREERTOS : lib/FreeRTOS ;
use-project /GTEST : lib/CommonTools/googletest ;


local boost_install_dir = [ os.environ BOOST_ROOT ] ;
path-constant boost_inc_dir : $(boost_install_dir)/boost_1_70_0 ;
path-constant boost_lib_dir : $(boost_inc_dir)/stage/lib ;
path-constant artifacts_dir : $(TOP)/artifacts ;

local boost_linux_libs = chrono ;

# ------------------------------------------
# /PRJ//XXXX Aliases
# ------------------------------------------
explicit_alias BOOST : : : : <include>$(boost_inc_dir) ;
explicit_alias BOOST_LIB : : : : <linkflags>-L$(boost_lib_dir) ;
explicit_alias CHIMERA_PORT : : : : <include>Chimera/Chimera/sim/config/chimera ;
explicit_alias CHIMERA_DEFS : : : : <define>CHIMERA_LITTLE_ENDIAN ;
explicit_alias EIGEN ;
explicit_alias FREERTOS_CFG : : : : <include>Chimera/Chimera/sim/config/freertos ;
explicit_alias TARGET_OPTIONS ;

project ChimeraDev
    : requirements
        <link>static
        <define>SIM
        <cxxflags>--std=gnu++17
        <Chimera>enabled
        <Chimera-backend>Sim

        <use>BOOST_LIB
    ;

# When building, you will also need to specify:
#   <FreeRTOS>enabled/disabled
#   <FreeRTOSPort>Windows/Posix
#   <FreeRTOSMem>heap1-5

